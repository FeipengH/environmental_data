x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "dark red")
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "red")
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation
LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "red")
legend("topright", legend=c("Smoothed", "Original"),
col=c("black", "red"), lty=1:2, cex=0.8)
legend("topright", legend=c("Smoothed", "Original"),
col=c("black", "red"), lty=1:2)
legend("topright", legend=c("Smoothed", "Original"),
col=c("black", "red"))
legend("topright", legend=c("Smoothed", "Original"),
fill=c("black", "red"), )
legend("topright", legend=c("Smoothed", "Original"),
color=c("black", "red"), )
legend("topright", legend=c("Smoothed", "Original"),
color=c("black", "red"), )
col
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation
LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "red")
legend("topright", legend=c("Smoothed", "Original"),
col=c("black", "red"), )
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation
LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "red")
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation
LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "blue")
legend("topright", legend=c("Smoothed", "Original"),
col=c("black", "red"), )
legend("topright", legend=c("Smoothed", "Original"), lty = c(1,0),
col=c("black", "blue"), )
legend("topright", legend=c("Smoothed", "Original"), lty = c(1,0), pch = c(0,16),
col=c("black", "blue"), )
legend("topright", legend=c("Smoothed", "Original"), lty = c(1,0), pch = c(-1,16),
col=c("black", "blue"), )
plot(
x = newdata_sd$sd,
y = predict(fit_lowess_30, newdata = newdata_sd),
type = "l",
ylab = "Statistical power", xlab = "Population dispersion",
main = "Population Dispersion/Power Simulation
LOWESS: 30%")
points(power ~ sd, data = sim_output_dispersion, pch = 16, col = "blue")
legend("topright", legend=c("Smoothed", "Original"), lty = c(1,0), pch = c(-1,16),
col=c("black", "blue"), )
dat_dispersal<-read.csv("/Users/stonehuang/Documents/environmental_data/dispersal.csv")
dat_dispersal<-read.csv("/Users/stonehuang/Documents/environmental_data/data/dispersal.csv")
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
fit_ricker_nls = nls(
disp.rate.ftb ~ ricker_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_ricker_nls)
dat_dispersal
plot(disp.rate.eb ~ dist.class, data = dat_dispersal)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\nlinear model")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
###ricker model
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\nricker model")
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE)
###exponential model
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\nexponential model")
curve(exp_fun(x, 1, 0.003), add = TRUE)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders"，
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders"，pch = 16)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16
xlim = c(0, 1500),
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue"
xlim = c(0, 1500),
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue",
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue",
xlim = c(0, 1500),
xlab = "Distance class",
ylab = "Standardized dispersal rate",
main = "Plot of Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE)
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, type = 2)
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, type = "2")
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, lty = 2)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue",
xlim = c(0, 1500),
xlab = "Distance class",
ylab = "Standardized dispersal rate",
main = "Plot of Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, lty = 2, col = "blue")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue",
xlim = c(0, 1500),
xlab = "Distance class",
ylab = "Standardized dispersal rate",
main = "Plot of Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, lty = 2, col = "red")
legend("topright", legend = c("guess", "nls fit"), lty = c(2,1) , col = c("red", "black"))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
pch = 16,
col = "blue",
xlim = c(0, 1500),
xlab = "Distance class",
ylab = "Standardized dispersal rate",
main = "Plot of Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
curve(ricker_fun(x, 0.0015, 0.0025), add = TRUE, lty = 2, col = "red")
legend("topright", legend = c("guess", "nls"), lty = c(2,1) , col = c("red", "black"))
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$HEWA_pres = dat_all$HEWA > 0
dat_all$HEWA_pres
dat_all
fit_hewa_slope = glm(HEWA_pres ~ slope, data = dat_all, family = binomial)
fit_hewa_ba_tot = glm(HEWA_pres ~ ba.tot, data = dat_all, family = binomial)
fit_hewa_both_additive = glm(HEWA_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_hewa_both_interactive = glm(HEWA_pres ~ slope * ba.tot, data = dat_all, family = binomial)
fit_hewa_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_hewa_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_hewa_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_hewa_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
dat_all$GCKI_pres = dat_all$GCKI > 0
fit_hewa_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_hewa_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_hewa_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_hewa_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
AIC(fit_hewa_slope)
AIC(fit_hewa_ba_tot)
AIC(fit_hewa_both_additive)
AIC(fit_hewa_both_interactive)
fit_GCKI_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_GCKI_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_GCKI_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_GCKI_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
AIC(fit_GCKI_slope)
AIC(fit_GCKI_ba_tot)
AIC(fit_GCKI_both_additive)
AIC(fit_GCKI_both_interactive)
summary(fit_GCKI_both_interactive)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(
ba = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n
)
)
slope_newdata$hewa_predicted =
predict(
fit_hewa_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$hewa_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
ba_newdata$hewa_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
fit_hewa_ba_tot
ba_newdata
ba_newdata$hewa_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
ba_newdata$hewa_predicted
plot(fit_GCKI_slope)
plot(GCKI_pres ~ slope, data = dat_all)
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ slope, ba.tot = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
plot(GCKI_pres ~ slope, ba.tot = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ slope, ba.tot = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
dat_all$GCKI_pres = dat_all$GCKI > 0
fit_GCKI_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_GCKI_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_GCKI_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_GCKI_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
AIC(fit_GCKI_slope)
AIC(fit_GCKI_ba_tot)
AIC(fit_GCKI_both_additive)
AIC(fit_GCKI_both_interactive)
summary(fit_GCKI_both_interactive)
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ slope, ba.tot = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ ba.tot, data = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
plot(GCKI_pres ~ slope, data = dat_all, pch = 16, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ ba.tot, data = dat_all, pch = 16, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
plot(GCKI_pres ~ ba.tot, data = dat_all, xlab = "Basal area", ylab = "GCKI presence/absence", main = "GCKI Basal Area Model Plot")
fit_GCKI_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_GCKI_slope
lines(fit_GCKI_slope)
lines(GCKI_pres ~ slope, data = dat_all)
plot(GCKI_pres ~ slope, data = dat_all, xlab = "Percent slope", ylab = "GCKI presence/absence", main = "GCKI Slope Model Plot")
slope_newdata$GCKI_predicted =
predict(
fit_GCKI_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$GCKI_predicted =
predict(
fit_GCKI_ba_tot,
newdata = ba_newdata,
type = "response"
)
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n
)
)
slope_newdata$GCKI_predicted =
predict(
fit_GCKI_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$GCKI_predicted =
predict(
fit_GCKI_ba_tot,
newdata = ba_newdata,
type = "response"
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
main = "GCKI Slope Model Plot",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
main = "GCKI Basal Area Model Plot",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
##Plotting Both Parameters##
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
max(dat_all$slope, na.rm = T),
max(dat_all$slope, na.rm = T)
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
new_dat_all$pred_int = predict(
fit_GCKI_both_interactive,
newdata = new_dat_all,
type = "response")
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_GCKI_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_GCKI_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
z_GCKI_int
